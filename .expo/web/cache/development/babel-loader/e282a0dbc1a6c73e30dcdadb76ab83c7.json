{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _sstore = _interopRequireDefault(require(\"../utility/sstore\"));\n\nvar _firebase = _interopRequireDefault(require(\"../config/firebase\"));\n\nvar getAllergens = function getAllergens(allergyKey) {\n  return _regenerator.default.async(function getAllergens$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap(_sstore.default.get(allergyKey));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getConditions = function getConditions(conditionKey) {\n  return _regenerator.default.async(function getConditions$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regenerator.default.awrap(_sstore.default.get(conditionKey));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar checkAllergens = function checkAllergens(ingredientsText, traces, contains) {\n  var currentID, allergyKey, userAllergies, foundAllergies, conditionWarnings, index, element, allergyText;\n  return _regenerator.default.async(function checkAllergens$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          currentID = _firebase.default.auth().currentUser.uid;\n          allergyKey = currentID + \"allergies\";\n          _context3.next = 4;\n          return _regenerator.default.awrap(getAllergens(allergyKey));\n\n        case 4:\n          userAllergies = _context3.sent;\n          ingredientsText = ingredientsText.toLowerCase();\n          traces = traces.toLowerCase();\n          foundAllergies = [];\n          conditionWarnings = [];\n\n          for (index = 0; index < userAllergies.length; index++) {\n            element = userAllergies[index].label.toLowerCase();\n\n            if (ingredientsText.includes(element) || traces.includes(element)) {\n              foundAllergies.push(element);\n            }\n          }\n\n          allergyText = foundAllergies.join(\", \");\n          return _context3.abrupt(\"return\", allergyText);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar checkConditions = function checkConditions(foodItem) {\n  var currentID, conditionKey, userConditions, conditionText, index, element;\n  return _regenerator.default.async(function checkConditions$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          currentID = _firebase.default.auth().currentUser.uid;\n          conditionKey = currentID + \"conditions\";\n          _context4.next = 4;\n          return _regenerator.default.awrap(getConditions(conditionKey));\n\n        case 4:\n          userConditions = _context4.sent;\n          conditionText = \"\";\n\n          for (index = 0; index < userConditions.length; index++) {\n            element = userConditions[index].label;\n            console.log(element);\n\n            if (element == \"Cancer\") {\n              console.log(\"This user has cancer\");\n              conditionText = conditionText + cancerCheck(foodItem, conditionText).join(\", \");\n            }\n\n            if (element == \"IBS\") {\n              conditionText = conditionText + ibsCheck(foodItem, conditionText).join(\", \");\n            }\n\n            if (element == \"Heart Disease\") {\n              conditionText = conditionText + hdCheck(foodItem, conditionText).join(\", \");\n            }\n          }\n\n          return _context4.abrupt(\"return\", conditionText);\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar warn = \"\";\n\nvar cancerCheck = function cancerCheck(foodItem, conditionText) {\n  var conditionWarnings = [];\n  console.log(foodItem);\n\n  if (foodItem.sugars_100g > 20 && conditionText.includes(\"calcium\", 0) == false) {\n    console.log(\"this food is high in sugar\");\n    warn = \"this food is high in sugar\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.lactose_100g > 0 && conditionText.includes(\"lactose\", 0) == false) {\n    warn = \"this food contains lactose\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.sodium_100g > 0.2 && conditionText.includes(\"sodium\", 0) == false) {\n    warn = \"this food is high in sodium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"omega-3-fat_100g\"] > 0.35 && conditionText.includes(\"omega 3\", 0) == false) {\n    warn = \"this food is high in omega 3's\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"fruits-vegetables-nuts-estimate-from-ingredients_100g\"] > 0 && conditionText.includes(\"fruits, veggies, or nuts\", 0) == false) {\n    warn = \"this food contains fruits, veggies or nuts\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-a_100g\"] > 0 && conditionText.includes(\"vitamin A\", 0) == false) {\n    warn = \"this food contains vitamin A\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.proteins_serving > 5 && conditionText.includes(\"protein\", 0) == false) {\n    warn = \"this food is high in protein\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.calcium_100g > 0.12 && conditionText.includes(\"calcium\", 0) == false) {\n    warn = \"this food is high in calcium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.potassium_100g > 0.3 && conditionText.includes(\"potassium\", 0) == false) {\n    warn = \"this food is high in potassium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.fiber_100g > 6 && conditionText.includes(\"fiber\", 0) == false) {\n    warn = \"this food is high in fiber\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-d_100g\"] > 0 && conditionText.includes(\"vitamin D\", 0) == false) {\n    warn = \"this food contains vitamin D\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-c_100g\"] > 0 && conditionText.includes(\"vitamin C\", 0) == false) {\n    warn = \"this food contains vitamin C\";\n    conditionWarnings.push(warn);\n  }\n\n  return conditionWarnings;\n};\n\nvar ibsCheck = function ibsCheck(foodItem, conditionText) {\n  var conditionWarnings = [];\n  console.log(foodItem);\n\n  if (foodItem.lactose_100g > 0 && conditionText.includes(\"lactose\", 0) == false) {\n    warn = \"this food contains lactose\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.sodium_100g > 0.2 && conditionText.includes(\"sodium\", 0) == false) {\n    warn = \"this food is high in sodium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"monounsaturated-fat_100g\"] > 17 && conditionText.includes(\"monousaturated fat\", 0) == false) {\n    warn = \"this food is high in monounsaturated fat\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-b6_100g\"] > 0 && conditionText.includes(\"vitamin B6\", 0) == false) {\n    warn = \"this food contains vitamin B6\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-a_100g\"] > 0 && conditionText.includes(\"vitamin A\", 0) == false) {\n    warn = \"this food contains vitamin A\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.proteins_100g > 5 && conditionText.includes(\"protein\", 0) == false) {\n    warn = \"this food is high in protein\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.fiber_100g > 6 && conditionText.includes(\"fiber\", 0) == false) {\n    warn = \"this food is high in fiber\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-c_100g\"] > 0 && conditionText.includes(\"vitamin C\", 0) == false) {\n    warn = \"this food contains vitamin C\";\n    conditionWarnings.push(warn);\n  }\n\n  return conditionWarnings;\n};\n\nvar hdCheck = function hdCheck(foodItem, conditionText) {\n  var conditionWarnings = [];\n  console.log(foodItem);\n\n  if (foodItem.sugars_100g > 20 && conditionText.includes(\"sugar\", 0) == false) {\n    warn = \"this food is high in sugar\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.cholesterol_100g > 0.2 && conditionText.includes(\"cholesterol\", 0) == false) {\n    warn = \"this food is high in cholesterol\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"saturated-fat_100g\"] > 5 && conditionText.includes(\"saturated fat\", 0) == false) {\n    warn = \"this food is high in saturated fat\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.sodium_100g > 0.2 && conditionText.includes(\"sodium\", 0) == false) {\n    warn = \"this food is high in sodium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"omega-3-fat_100g\"] > 0.35 && conditionText.includes(\"omega 3\", 0) == false) {\n    warn = \"this food is high in omega 3's\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"fruits-vegetables-nuts-estimate-from-ingredients_100g\"] > 0 && conditionText.includes(\"fruits, veggies, nuts\", 0) == false) {\n    warn = \"this food contains fruits, veggies or nuts\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-a_100g\"] > 0 && conditionText.includes(\"vitamin A\", 0) == false) {\n    warn = \"this food contains vitamin A\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.proteins_100g > 5 && conditionText.includes(\"protein\", 0) == false) {\n    warn = \"this food is high in protein\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.calcium_100g > 0.12 && conditionText.includes(\"calcium\", 0) == false) {\n    warn = \"this food is high in calcium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.potassium_100g > 0.3 && conditionText.includes(\"potassium\", 0) == false) {\n    warn = \"this food is high in potassium\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.fiber_100g > 6 && conditionText.includes(\"fiber\", 0) == false) {\n    warn = \"this food is high in fiber\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem.vitamin_d_100g > 0 && conditionText.includes(\"vitamin D\", 0) == false) {\n    warn = \"this food contains vitamin D\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-c_100g\"] > 0 && conditionText.includes(\"calcium\", 0) == false) {\n    warn = \"this food contains vitamin C\";\n    conditionWarnings.push(warn);\n  }\n\n  if (foodItem[\"vitamin-b6_100g\"] > 0 && conditionText.includes(\"calcium\", 0) == false) {\n    warn = \"this food contains vitamin B6\";\n    conditionWarnings.push(warn);\n  }\n\n  return conditionWarnings;\n};\n\nvar _default = {\n  checkAllergens: checkAllergens,\n  checkConditions: checkConditions\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Mason/ELTRFront/app/utility/check.js"],"names":["getAllergens","allergyKey","sstore","get","getConditions","conditionKey","checkAllergens","ingredientsText","traces","contains","currentID","Firebase","auth","currentUser","uid","userAllergies","toLowerCase","foundAllergies","conditionWarnings","index","length","element","label","includes","push","allergyText","join","checkConditions","foodItem","userConditions","conditionText","console","log","cancerCheck","ibsCheck","hdCheck","warn","sugars_100g","lactose_100g","sodium_100g","proteins_serving","calcium_100g","potassium_100g","fiber_100g","proteins_100g","cholesterol_100g","vitamin_d_100g"],"mappings":"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","sourcesContent":["import sstore from \"../utility/sstore\";\r\nimport Firebase from \"../config/firebase\";\r\n\r\n//helper function to get a users allergens\r\nconst getAllergens = async (allergyKey) => {\r\n  return await sstore.get(allergyKey);\r\n};\r\n\r\n//helper function to get a users conditions\r\nconst getConditions = async (conditionKey) => {\r\n  return await sstore.get(conditionKey);\r\n};\r\n\r\n//function to check for allergens in a food product\r\n\r\nconst checkAllergens = async (ingredientsText, traces, contains) => {\r\n  //get user from firebase\r\n  const currentID = Firebase.auth().currentUser.uid;\r\n  //build keys for allergies and conditions from user id\r\n  const allergyKey = currentID + \"allergies\";\r\n  const userAllergies = await getAllergens(allergyKey);\r\n\r\n  //make sure everything is lowercase\r\n  ingredientsText = ingredientsText.toLowerCase();\r\n  traces = traces.toLowerCase();\r\n\r\n  //this is where any found allergies will go\r\n  let foundAllergies = [];\r\n  let conditionWarnings = [];\r\n\r\n  for (let index = 0; index < userAllergies.length; index++) {\r\n    const element = userAllergies[index].label.toLowerCase();\r\n    if (ingredientsText.includes(element) || traces.includes(element)) {\r\n      foundAllergies.push(element);\r\n    }\r\n  }\r\n\r\n  const allergyText = foundAllergies.join(\", \"); //this makes it into a nice comma delimited list\r\n  return allergyText;\r\n};\r\n\r\n//function to check for ingredients that may be bad for someone with a given condition\r\n\r\nconst checkConditions = async (foodItem) => {\r\n  //get user from firebase\r\n  const currentID = Firebase.auth().currentUser.uid;\r\n  //build keys for allergies and conditions from user id\r\n  const conditionKey = currentID + \"conditions\";\r\n  const userConditions = await getConditions(conditionKey);\r\n  let conditionText = \"\";\r\n  for (let index = 0; index < userConditions.length; index++) {\r\n    const element = userConditions[index].label;\r\n    console.log(element);\r\n    if (element == \"Cancer\") {\r\n      console.log(\"This user has cancer\");\r\n      conditionText =\r\n        conditionText + cancerCheck(foodItem, conditionText).join(\", \");\r\n    }\r\n    if (element == \"IBS\") {\r\n      conditionText =\r\n        conditionText + ibsCheck(foodItem, conditionText).join(\", \");\r\n    }\r\n    if (element == \"Heart Disease\") {\r\n      conditionText =\r\n        conditionText + hdCheck(foodItem, conditionText).join(\", \");\r\n    }\r\n  }\r\n  return conditionText;\r\n};\r\n\r\nvar warn = \"\";\r\n\r\nconst cancerCheck = (foodItem, conditionText) => {\r\n  //First check for things to avoid'\r\n  let conditionWarnings = [];\r\n  console.log(foodItem);\r\n  //check levels of sugar\r\n  if (\r\n    foodItem.sugars_100g > 20 &&\r\n    conditionText.includes(\"calcium\", 0) == false\r\n  ) {\r\n    console.log(\"this food is high in sugar\");\r\n    warn = \"this food is high in sugar\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  //check levels of lactose\r\n  if (\r\n    foodItem.lactose_100g > 0 &&\r\n    conditionText.includes(\"lactose\", 0) == false\r\n  ) {\r\n    warn = \"this food contains lactose\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  //check levels of sodium\r\n  if (\r\n    foodItem.sodium_100g > 0.2 &&\r\n    conditionText.includes(\"sodium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in sodium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //Now check for good things\r\n  //check omega 3\r\n  if (\r\n    foodItem[\"omega-3-fat_100g\"] > 0.35 &&\r\n    conditionText.includes(\"omega 3\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in omega 3's\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  //check fruits, veggies, and nuts\r\n  if (\r\n    foodItem[\"fruits-vegetables-nuts-estimate-from-ingredients_100g\"] > 0 &&\r\n    conditionText.includes(\"fruits, veggies, or nuts\", 0) == false\r\n  ) {\r\n    warn = \"this food contains fruits, veggies or nuts\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin A\r\n  if (\r\n    foodItem[\"vitamin-a_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin A\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin A\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check protein\r\n  if (\r\n    foodItem.proteins_serving > 5 &&\r\n    conditionText.includes(\"protein\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in protein\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check calcium\r\n  if (\r\n    foodItem.calcium_100g > 0.12 &&\r\n    conditionText.includes(\"calcium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in calcium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check potassium\r\n  if (\r\n    foodItem.potassium_100g > 0.3 &&\r\n    conditionText.includes(\"potassium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in potassium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check fiber\r\n  if (foodItem.fiber_100g > 6 && conditionText.includes(\"fiber\", 0) == false) {\r\n    warn = \"this food is high in fiber\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin D\r\n  if (\r\n    foodItem[\"vitamin-d_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin D\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin D\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin C\r\n  if (\r\n    foodItem[\"vitamin-c_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin C\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin C\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  return conditionWarnings;\r\n};\r\n\r\nconst ibsCheck = (foodItem, conditionText) => {\r\n  //First check for things to avoid\r\n  let conditionWarnings = [];\r\n  console.log(foodItem);\r\n  //check levels of lactose\r\n  if (\r\n    foodItem.lactose_100g > 0 &&\r\n    conditionText.includes(\"lactose\", 0) == false\r\n  ) {\r\n    warn = \"this food contains lactose\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  //check for gluten\r\n  //allergens?\r\n\r\n  //check levels of sodium\r\n  if (\r\n    foodItem.sodium_100g > 0.2 &&\r\n    conditionText.includes(\"sodium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in sodium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //Now check for good things\r\n  //check monounsaturated_fat\r\n  if (\r\n    foodItem[\"monounsaturated-fat_100g\"] > 17 &&\r\n    conditionText.includes(\"monousaturated fat\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in monounsaturated fat\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  //check vitamin B6\r\n  if (\r\n    foodItem[\"vitamin-b6_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin B6\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin B6\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin A\r\n  if (\r\n    foodItem[\"vitamin-a_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin A\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin A\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check protein\r\n  if (\r\n    foodItem.proteins_100g > 5 &&\r\n    conditionText.includes(\"protein\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in protein\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check fiber\r\n  if (foodItem.fiber_100g > 6 && conditionText.includes(\"fiber\", 0) == false) {\r\n    warn = \"this food is high in fiber\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin C\r\n  if (\r\n    foodItem[\"vitamin-c_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin C\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin C\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  return conditionWarnings;\r\n};\r\n\r\nconst hdCheck = (foodItem, conditionText) => {\r\n  //First check for things to avoid\r\n  let conditionWarnings = [];\r\n  console.log(foodItem);\r\n  //check levels of sucrose\r\n  if (\r\n    foodItem.sugars_100g > 20 &&\r\n    conditionText.includes(\"sugar\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in sugar\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check levels of cholesterol\r\n  if (\r\n    foodItem.cholesterol_100g > 0.2 &&\r\n    conditionText.includes(\"cholesterol\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in cholesterol\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check levels of saturated fat\r\n  if (\r\n    foodItem[\"saturated-fat_100g\"] > 5 &&\r\n    conditionText.includes(\"saturated fat\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in saturated fat\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check sodium levels\r\n  if (\r\n    foodItem.sodium_100g > 0.2 &&\r\n    conditionText.includes(\"sodium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in sodium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //Now check for good things\r\n  //check omega 3\r\n  if (\r\n    foodItem[\"omega-3-fat_100g\"] > 0.35 &&\r\n    conditionText.includes(\"omega 3\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in omega 3's\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check fruits, veggies, and nuts\r\n  if (\r\n    foodItem[\"fruits-vegetables-nuts-estimate-from-ingredients_100g\"] > 0 &&\r\n    conditionText.includes(\"fruits, veggies, nuts\", 0) == false\r\n  ) {\r\n    warn = \"this food contains fruits, veggies or nuts\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin A\r\n  if (\r\n    foodItem[\"vitamin-a_100g\"] > 0 &&\r\n    conditionText.includes(\"vitamin A\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin A\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check protein\r\n  if (\r\n    foodItem.proteins_100g > 5 &&\r\n    conditionText.includes(\"protein\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in protein\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check calcium\r\n  if (\r\n    foodItem.calcium_100g > 0.12 &&\r\n    conditionText.includes(\"calcium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in calcium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check potassium\r\n  if (\r\n    foodItem.potassium_100g > 0.3 &&\r\n    conditionText.includes(\"potassium\", 0) == false\r\n  ) {\r\n    warn = \"this food is high in potassium\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check fiber\r\n  if (foodItem.fiber_100g > 6 && conditionText.includes(\"fiber\", 0) == false) {\r\n    warn = \"this food is high in fiber\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin D\r\n  if (\r\n    foodItem.vitamin_d_100g > 0 &&\r\n    conditionText.includes(\"vitamin D\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin D\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitamin C\r\n  if (\r\n    foodItem[\"vitamin-c_100g\"] > 0 &&\r\n    conditionText.includes(\"calcium\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin C\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n\r\n  //check vitaminB6\r\n  if (\r\n    foodItem[\"vitamin-b6_100g\"] > 0 &&\r\n    conditionText.includes(\"calcium\", 0) == false\r\n  ) {\r\n    warn = \"this food contains vitamin B6\";\r\n    conditionWarnings.push(warn);\r\n  }\r\n  return conditionWarnings;\r\n};\r\n\r\nexport default {\r\n  checkAllergens,\r\n  checkConditions,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}