{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar Yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _context = _interopRequireDefault(require(\"../auth/context\"));\n\nvar _AppText = _interopRequireDefault(require(\"../components/AppText\"));\n\nvar _forms = require(\"../components/forms\");\n\nvar _Screen = _interopRequireDefault(require(\"../components/Screen\"));\n\nvar _colors = _interopRequireDefault(require(\"../config/colors\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mason\\\\ELTRFront\\\\app\\\\screens\\\\EditAccountEmail.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\")\n});\n\nfunction EditAccountEmail(_ref) {\n  var navigation = _ref.navigation;\n  var authContext = (0, _react.useContext)(_context.default);\n  var user = authContext.user;\n\n  var handleSubmit = function handleSubmit(_ref2) {\n    var email = _ref2.email;\n    user.updateEmail(email).then(function () {\n      navigation.goBack();\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return _react.default.createElement(_Screen.default, {\n    style: styles.container,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_AppText.default, {\n    style: styles.tooltip,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Enter new email\"), _react.default.createElement(_forms.AppForm, {\n    initialValues: {\n      email: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_forms.AppFormField, {\n    name: \"email\",\n    autoCaptilize: \"none\",\n    autoCorrect: false,\n    keyboardType: \"email-address\",\n    icon: \"email\",\n    placeholder: \"Email\",\n    textContentType: \"emailAddress\",\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_forms.SubmitButton, {\n    title: \"Save\",\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar styles = _StyleSheet.default.create({\n  container: {\n    padding: 10,\n    backgroundColor: _colors.default.white\n  },\n  tooltip: {\n    alignSelf: \"center\",\n    textTransform: \"capitalize\"\n  }\n});\n\nvar _default = EditAccountEmail;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Mason/ELTRFront/app/screens/EditAccountEmail.js"],"names":["validationSchema","Yup","object","shape","email","string","required","label","EditAccountEmail","navigation","authContext","AuthContext","user","handleSubmit","updateEmail","then","goBack","catch","error","console","log","styles","container","tooltip","StyleSheet","create","padding","backgroundColor","colors","white","alignSelf","textTransform"],"mappings":";;;;;;;AAAA;;;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,EAAAA,KAAK,EAAEH,GAAG,CAACI,MAAJ,GAAaC,QAAb,GAAwBF,KAAxB,GAAgCG,KAAhC,CAAsC,OAAtC;AADmC,CAAnB,CAAzB;;AAIA,SAASC,gBAAT,OAA0C;AAAA,MAAdC,UAAc,QAAdA,UAAc;AACxC,MAAMC,WAAW,GAAG,uBAAWC,gBAAX,CAApB;AACA,MAAIC,IAAI,GAAGF,WAAW,CAACE,IAAvB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,QAAe;AAAA,QAAZT,KAAY,SAAZA,KAAY;AAClCQ,IAAAA,IAAI,CACDE,WADH,CACeV,KADf,EAEGW,IAFH,CAEQ,YAAY;AAChBN,MAAAA,UAAU,CAACO,MAAX;AACD,KAJH,EAKGC,KALH,CAKS,UAAUC,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAPH;AAQD,GATD;;AAWA,SACE,6BAAC,eAAD;AAAQ,IAAA,KAAK,EAAEG,MAAM,CAACC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,gBAAD;AAAS,IAAA,KAAK,EAAED,MAAM,CAACE,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,6BAAC,cAAD;AACE,IAAA,aAAa,EAAE;AACbnB,MAAAA,KAAK,EAAE;AADM,KADjB;AAIE,IAAA,QAAQ,EAAES,YAJZ;AAKE,IAAA,gBAAgB,EAAEb,gBALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,6BAAC,mBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,aAAa,EAAC,MAFhB;AAGE,IAAA,WAAW,EAAE,KAHf;AAIE,IAAA,YAAY,EAAC,eAJf;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,WAAW,EAAC,OANd;AAOE,IAAA,eAAe,EAAC,cAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAgBE,6BAAC,mBAAD;AAAc,IAAA,KAAK,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CAFF,CADF;AAuBD;;AAED,IAAMqB,MAAM,GAAGG,oBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,OAAO,EAAE,EADA;AAETC,IAAAA,eAAe,EAAEC,gBAAOC;AAFf,GADoB;AAK/BN,EAAAA,OAAO,EAAE;AACPO,IAAAA,SAAS,EAAE,QADJ;AAEPC,IAAAA,aAAa,EAAE;AAFR;AALsB,CAAlB,CAAf;;eAWevB,gB","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport * as Yup from \"yup\";\r\nimport AuthContext from \"../auth/context\";\r\nimport AppText from \"../components/AppText\";\r\n\r\nimport { AppForm, AppFormField, SubmitButton } from \"../components/forms\";\r\nimport Screen from \"../components/Screen\";\r\nimport colors from \"../config/colors\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().required().email().label(\"Email\"),\r\n});\r\n\r\nfunction EditAccountEmail({ navigation }) {\r\n  const authContext = useContext(AuthContext);\r\n  let user = authContext.user;\r\n\r\n  const handleSubmit = ({ email }) => {\r\n    user\r\n      .updateEmail(email)\r\n      .then(function () {\r\n        navigation.goBack();\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Screen style={styles.container}>\r\n      <AppText style={styles.tooltip}>Enter new email</AppText>\r\n      <AppForm\r\n        initialValues={{\r\n          email: \"\",\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        <AppFormField\r\n          name=\"email\"\r\n          autoCaptilize=\"none\"\r\n          autoCorrect={false}\r\n          keyboardType=\"email-address\"\r\n          icon=\"email\"\r\n          placeholder=\"Email\"\r\n          textContentType=\"emailAddress\"\r\n        />\r\n        <SubmitButton title=\"Save\" />\r\n      </AppForm>\r\n    </Screen>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 10,\r\n    backgroundColor: colors.white,\r\n  },\r\n  tooltip: {\r\n    alignSelf: \"center\",\r\n    textTransform: \"capitalize\",\r\n  },\r\n});\r\n\r\nexport default EditAccountEmail;\r\n"]},"metadata":{},"sourceType":"script"}