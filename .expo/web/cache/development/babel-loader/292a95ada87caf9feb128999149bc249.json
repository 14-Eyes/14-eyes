{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"react-native-web/dist/exports/ActivityIndicator\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _expoCamera = require(\"expo-camera\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _colors = _interopRequireDefault(require(\"../config/colors\"));\n\nvar _routes = _interopRequireDefault(require(\"../navigation/routes\"));\n\nvar _products = _interopRequireDefault(require(\"../api/products\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mason\\\\ELTRFront\\\\app\\\\screens\\\\ScanningScreen.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ScanningScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var isFocused = (0, _native.useIsFocused)();\n\n  var barcodeScanned = function barcodeScanned(barcode) {\n    var response;\n    return _regenerator.default.async(function barcodeScanned$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regenerator.default.awrap(_products.default.getProduct(barcode));\n\n          case 3:\n            response = _context.sent;\n            setLoading(false);\n            navigation.navigate(_routes.default.FOOD_ITEM, response.data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  (0, _react.useEffect)(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regenerator.default.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(_expoCamera.Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context2.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return _react.default.createElement(_View.default, {\n      __self: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (hasPermission === false) {\n    return _react.default.createElement(_Text.default, {\n      __self: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return _react.default.createElement(_react.default.Fragment, null, isFocused && _react.default.createElement(_expoCamera.Camera, {\n    style: styles.camera,\n    type: _expoCamera.Camera.Constants.Type.back,\n    onBarCodeScanned: barcodeScanned,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_View.default, {\n    style: styles.barcodeBorder,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_ActivityIndicator.default, {\n    animating: loading,\n    size: \"large\",\n    color: _colors.default.primary,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }))));\n}\n\nvar styles = _StyleSheet.default.create({\n  container: {},\n  camera: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 20\n  },\n  barcodeBorder: {\n    borderWidth: 5,\n    width: \"70%\",\n    height: \"30%\",\n    borderColor: _colors.default.white,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n\nvar _default = ScanningScreen;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Mason/ELTRFront/app/screens/ScanningScreen.js"],"names":["ScanningScreen","navigation","hasPermission","setHasPermission","loading","setLoading","isFocused","barcodeScanned","barcode","productApi","getProduct","response","navigate","routes","FOOD_ITEM","data","Camera","requestPermissionsAsync","status","styles","camera","Constants","Type","back","barcodeBorder","colors","primary","StyleSheet","create","container","flex","justifyContent","alignItems","padding","borderWidth","width","height","borderColor","white"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA,SAASA,cAAT,OAAwC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACI,qBAAS,IAAT,CADJ;AAAA;AAAA,MAC/BC,aAD+B;AAAA,MAChBC,gBADgB;;AAAA,mBAER,qBAAS,KAAT,CAFQ;AAAA;AAAA,MAE/BC,OAF+B;AAAA,MAEtBC,UAFsB;;AAGtC,MAAMC,SAAS,GAAG,2BAAlB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBH,YAAAA,UAAU,CAAC,IAAD,CAAV;AADqB;AAAA,8CAEEI,kBAAWC,UAAX,CAAsBF,OAAtB,CAFF;;AAAA;AAEfG,YAAAA,QAFe;AAGrBN,YAAAA,UAAU,CAAC,KAAD,CAAV;AAEAJ,YAAAA,UAAU,CAACW,QAAX,CAAoBC,gBAAOC,SAA3B,EAAsCH,QAAQ,CAACI,IAA/C;;AALqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAQA,wBAAU,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAC0BC,mBAAOC,uBAAP,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECf,cAAAA,gBAAgB,CAACe,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALD,EAKG,EALH;;AAOA,MAAIhB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,6BAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,6BAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,4DACGI,SAAS,IACR,6BAAC,kBAAD;AACE,IAAA,KAAK,EAAEa,MAAM,CAACC,MADhB;AAEE,IAAA,IAAI,EAAEJ,mBAAOK,SAAP,CAAiBC,IAAjB,CAAsBC,IAF9B;AAGE,IAAA,gBAAgB,EAAEhB,cAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,6BAAC,aAAD;AAAM,IAAA,KAAK,EAAEY,MAAM,CAACK,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,0BAAD;AACE,IAAA,SAAS,EAAEpB,OADb;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEqB,gBAAOC,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CAFJ,CADF;AAmBD;;AAED,IAAMP,MAAM,GAAGQ,oBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE,EADoB;AAE/BT,EAAAA,MAAM,EAAE;AACNU,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,QAFV;AAGNC,IAAAA,UAAU,EAAE,QAHN;AAINC,IAAAA,OAAO,EAAE;AAJH,GAFuB;AAQ/BT,EAAAA,aAAa,EAAE;AACbU,IAAAA,WAAW,EAAE,CADA;AAEbC,IAAAA,KAAK,EAAE,KAFM;AAGbC,IAAAA,MAAM,EAAE,KAHK;AAIbC,IAAAA,WAAW,EAAEZ,gBAAOa,KAJP;AAKbP,IAAAA,cAAc,EAAE,QALH;AAMbC,IAAAA,UAAU,EAAE;AANC;AARgB,CAAlB,CAAf;;eAkBehC,c","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, StyleSheet, ActivityIndicator, Text } from \"react-native\";\r\nimport { Camera } from \"expo-camera\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\n\r\nimport colors from \"../config/colors\";\r\nimport routes from \"../navigation/routes\";\r\nimport productApi from \"../api/products\";\r\n\r\nfunction ScanningScreen({ navigation }) {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const isFocused = useIsFocused();\r\n\r\n  const barcodeScanned = async (barcode) => {\r\n    setLoading(true);\r\n    const response = await productApi.getProduct(barcode);\r\n    setLoading(false);\r\n\r\n    navigation.navigate(routes.FOOD_ITEM, response.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isFocused && (\r\n        <Camera\r\n          style={styles.camera}\r\n          type={Camera.Constants.Type.back}\r\n          onBarCodeScanned={barcodeScanned}\r\n        >\r\n          <View style={styles.barcodeBorder}>\r\n            <ActivityIndicator\r\n              animating={loading}\r\n              size=\"large\"\r\n              color={colors.primary}\r\n            />\r\n          </View>\r\n        </Camera>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {},\r\n  camera: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n  },\r\n  barcodeBorder: {\r\n    borderWidth: 5,\r\n    width: \"70%\",\r\n    height: \"30%\",\r\n    borderColor: colors.white,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nexport default ScanningScreen;\r\n"]},"metadata":{},"sourceType":"script"}