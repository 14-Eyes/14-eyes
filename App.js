/**
 * This code handles the navigation logic for the app by determining whether a user is logged in and loading the appropriate screen flow.
 * 
 * If a user is logged in, the app loads a stack of navigators that organize sponsor content, core features, and child-related screens.
 * If no user is logged in, the app displays the authentication flow to handle login and account setup.
 * The entire navigation system is enclosed in a NavigationContainer, which applies a consistent visual theme, 
 * while AuthContext shares user data across all components.
 * 
 * Generated by CoPilot AI
 */



import React, { useState } from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";
import { SafeAreaProvider } from 'react-native-safe-area-context';

import navigationTheme from "./app/navigation/navigationTheme";
import AdNavigator from "./app/navigation/AdNavigator";
import AppNavigator from "./app/navigation/AppNavigator";
import ChildNavigator from "./app/navigation/ChildNavigator";
import AuthNavigator from "./app/navigation/AuthNavigator";
import AuthContext from "./app/auth/context";


const Stack = createStackNavigator();

export default function App() {
  const [user, setUser] = useState();
  const [username, setUsername] = useState();

  return (
    <SafeAreaProvider>
      <AuthContext.Provider value={{ user, setUser, username, setUsername }}>
        <NavigationContainer theme={navigationTheme}>
          {user ? (
            <Stack.Navigator>
          <Stack.Screen
                name="App Sponsor"
                component={AdNavigator}
                options={{ headerShown: false }}
              />
              <Stack.Screen
                name="AppNavigator"
                component={AppNavigator}
                options={{ headerShown: false }}
              />
              <Stack.Screen
                name="ChildNavigator"
                component={ChildNavigator}
                options={{ headerShown: false }}
              />
            </Stack.Navigator>
          ) : (
            <AuthNavigator />
          )}
        </NavigationContainer>
      </AuthContext.Provider>
    </SafeAreaProvider>
  );
}
